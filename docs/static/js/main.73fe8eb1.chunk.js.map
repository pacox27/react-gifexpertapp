{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","categorias","onSubmit","type","value","onChange","target","onClick","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","setTimeout","useFetchGifs","i","GifExpertApp","categoria","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MAuCeA,EAlCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,EAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAkBC,EAAlB,KAMMC,EAAe,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAE3CN,EAAc,MAKtB,OACI,uBAAMO,SAAYN,EAAlB,UACI,uBAAOO,KAAK,OAAOC,MAAOV,EAAYW,SAlBpB,SAACR,GACvBF,EAAcE,EAAES,OAAOF,UAkBnB,uBAAM,uBACN,wBAAQG,QAAUX,EAAlB,mC,QChBGY,EAVK,SAAC,GAAqB,EAAnBC,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,IAE5B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCJJK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAWF,GAD9C,kBAFT,EAES,oBAHP,oCAGO,SAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAGgB,EAAIhB,GACPC,MAAMe,EAAIf,MACVC,IAAG,UAACc,EAAIC,cAAL,aAAC,EAAYC,iBAAiBhB,QARtB,kBAYZY,GAZY,4CAAH,sDC2BLK,EAxBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SACf,ECJwB,SAAEA,GAE1B,MAAyBvB,mBAAS,CAC9B6B,KAAK,GACLO,SAAQ,IAFZ,mBAAOC,EAAP,KAAaC,EAAb,KAqBA,OAhBAC,qBAAW,WAEPjB,EAASC,GACJiB,MAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZG,YAAW,WACPN,EAAS,CACLT,KAAMY,EACNL,SAAS,MAEf,UAIZ,CAACb,IAEIc,EDnBuBQ,CAAatB,GAA/BU,EAAZ,EAAOJ,KAAYO,EAAnB,EAAmBA,QAInB,OACI,qCACA,6BAAMb,IAEJa,GAAW,wCAGT,qBAAKjB,UAAU,YAAf,SAEQc,EAAOF,KAAK,SAAEC,EAAKc,GACf,OAAO,cAAC,EAAD,eAA8Bd,GAAZA,EAAIhB,aEyBtC+B,EAxCM,WAEjB,MAAmC/C,mBAAS,CAAC,cAA7C,mBAAOQ,EAAP,KAAkBT,EAAlB,KASA,OACI,qCACI,8CAGA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQS,EAAWuB,KAAK,SAACiB,EAAUF,GAAX,OACZ,cAAC,EAAD,CAEIvB,SAAUyB,GADJA,EAAU1C,iBChB7B2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.73fe8eb1.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n//en los inputs hay que darles siempre un onChange\n\nconst AddCategory = ( {setCategorias} ) => {\n    const [inputValue,setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            \n            setCategorias(categorias => [inputValue,...categorias]);\n           \n            setInputValue('');\n        }\n        \n    }\n\n    return(\n        <form onSubmit = {handleSubmit}>\n            <input type='text' value={inputValue} onChange={ handleInputChange } />\n            <br /><br />\n            <button onClick={ handleSubmit }>\n                Agregar categoria\n            </button>   \n        </form>\n    );\n}\n\nAddCategory.propTypes = {\n    setCategorias:PropTypes.func.isRequired\n}\n\nexport default AddCategory;","import React from 'react';\n\nconst GifGridItem = ({ id,title,url }) => {\n\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    );\n}\n\nexport default GifGridItem;","const api_key = 'VfnD9GXKb2ShnDFMzlznNlLC1f89WdFQ';\nconst limit = 9;\n\nexport const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=${ limit }&api_key=${api_key}`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n\n}\n","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n//en los inputs hay que darles siempre un onChange\n\nconst GifGrid = ({ category }) => {\n    const {data:images,loading} = useFetchGifs(category);\n\n    //const [images,setImages] = useState([]);\n\n    return(\n        <>\n        <h3>{ category }</h3> \n\n        { loading && <p>Loading</p> }\n\n        {\n            <div className=\"card-grid\">\n                {\n                    images.map( ( img ,i) => {\n                        return <GifGridItem key={img.id} {...img} />\n                    })\n                }\n            </div>\n        }\n        </>\n    );\n}\n\nexport default GifGrid;","import {useState,useEffect} from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state,setState] = useState({\n        data:[],\n        loading:true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                console.log(imgs);\n                setTimeout(() => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n                },2000);\n                \n            })\n\n    },[category])//el segundo arreglo es una lista de dependencias\n\n    return state;\n\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n//no se le puede cambiar el estado\n//setCategoria puede regresar el nuevo estado o un callback en el que recibe el valor del estado anterior y regresa el nuevo estado\n\nconst GifExpertApp = () => {\n\n    const [categorias,setCategorias] = useState(['Owl House']);\n\n    /*const agregarCategoria = (e) => {\n        const categoriaNueva = valor.current.value;\n        setCategoria(prev => [categoriaNueva,...prev]);\n    }*/\n\n    //const valor = useRef();\n  \n    return(\n        <>\n            <h2>\n                GifExpertApp\n            </h2>\n            <AddCategory setCategorias={setCategorias} />\n            <hr />\n            <ol>\n                { \n                    categorias.map( (categoria,i) => \n                        <GifGrid \n                            key={ categoria.trim() } \n                            category={categoria} \n                        />\n                    )\n                }\n            </ol>\n            {/*\n                <input type = 'text' ref={valor} />\n                <button onClick={agregarCategoria}>\n                    Agregar categoria\n                </button>\n            */}\n            \n        </>\n    );\n\n}\n\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}